version: 0.2

env:
  variables:
    STACK_NAME: "my-iam-role-stack"
    TEMPLATE_PATH: "cloudformation/template.yaml"
    FALLBACK_TEMPLATE_PATH: "template.yaml"
    AWS_DEFAULT_REGION: "ap-south-1"

phases:
  install:
    runtime-versions:
      python: 3.11

  pre_build:
    commands:
      - env
      - echo Logging in to AWS...
      - aws --version
      - aws sts get-caller-identity
      - pip install --quiet --upgrade pip
      - pip install --upgrade awscli
      - pip install --quiet --upgrade cfn-lint
      - cfn-lint --version

  build:
    commands:
      - |
        set -e  # Exit on error, but remove -u and -x for better debugging
        echo "🚀 Starting build phase..."

        # Function to handle errors gracefully
        handle_error() {
          echo "❌ ERROR: $1"
          echo "Build failed at: $(date)"
          exit 1
        }

        echo "=== DEBUGGING INFORMATION ==="
        echo "Current working directory: $(pwd)"
        echo "Environment variables:"
        env | grep -E "(TEMPLATE_PATH|STACK_NAME|AWS_)" || echo "No relevant env vars found"
        echo ""
        echo "Listing all files in current directory:"
        ls -la || handle_error "Failed to list current directory"
        echo ""
        echo "Listing cloudformation directory:"
        if [ -d "cloudformation" ]; then
          ls -la cloudformation/ || handle_error "Failed to list cloudformation directory"
        else
          echo "⚠️  cloudformation directory not found"
        fi
        echo ""
        echo "Template path variable: $TEMPLATE_PATH"
        echo "Fallback template path: $FALLBACK_TEMPLATE_PATH"
        echo "Checking if template file exists:"
        if [ -f "$TEMPLATE_PATH" ]; then
          echo "✅ Template file found at: $TEMPLATE_PATH"
          ls -la "$TEMPLATE_PATH" || handle_error "Failed to stat template file"
        else
          echo "❌ Template file NOT found at: $TEMPLATE_PATH"
          echo "Searching for template files..."
          find . -name "*.yaml" -o -name "*.yml" 2>/dev/null | head -10 || echo "No YAML files found"
        fi
        echo "=== END DEBUGGING ==="
        echo ""

        echo "📝 Running Python syntax check..."
        if find . -name "*.py" -type f | grep -q .; then
          echo "Python files found, checking syntax..."
          python -m py_compile $(find . -type f -name '*.py') || handle_error "Python syntax check failed"
          echo "✅ Python syntax check passed"
        else
          echo "ℹ️  No Python files found, skipping syntax check"
        fi
        echo ""

        echo "🔍 Finding template files..."
        TEMPLATES="$(find . -type f -name '*.yaml' -o -name '*.yml' 2>/dev/null | grep -v '.git' || echo '')"
        if [ -n "$TEMPLATES" ]; then
          echo "Found CloudFormation templates: $TEMPLATES"
        else
          echo "⚠️  No YAML template files found"
        fi
        echo ""

        # Verify template file exists and use fallback if needed
        if [ ! -f "$TEMPLATE_PATH" ]; then
          echo "⚠️  Primary template not found at $TEMPLATE_PATH"
          echo "Trying fallback template at $FALLBACK_TEMPLATE_PATH"
          if [ -f "$FALLBACK_TEMPLATE_PATH" ]; then
            echo "✅ Using fallback template: $FALLBACK_TEMPLATE_PATH"
            TEMPLATE_PATH="$FALLBACK_TEMPLATE_PATH"
          else
            echo "❌ ERROR: No template file found at either location"
            echo "Primary: $TEMPLATE_PATH"
            echo "Fallback: $FALLBACK_TEMPLATE_PATH"
            echo "Available YAML files:"
            find . -name "*.yaml" -o -name "*.yml" | grep -v '.git'
            exit 1
          fi
        fi

        echo "✅ Using template file: $TEMPLATE_PATH"
        echo ""

        echo "🔍 Validating CloudFormation template..."
        if aws cloudformation validate-template --template-body file://$TEMPLATE_PATH --region $AWS_DEFAULT_REGION; then
          echo "✅ Template validation passed"
        else
          handle_error "CloudFormation template validation failed"
        fi
        echo ""

        echo "🔍 Linting CloudFormation template..."
        if cfn-lint $TEMPLATE_PATH; then
          echo "✅ Template linting passed"
        else
          echo "⚠️  Template linting found issues, but continuing..."
        fi
        echo ""

        echo "🚀 Deploying CloudFormation stack..."
        echo "Stack Name: $STACK_NAME"
        echo "Template: $TEMPLATE_PATH"
        echo "Region: $AWS_DEFAULT_REGION"
        echo ""

        if aws cloudformation deploy \
          --template-file $TEMPLATE_PATH \
          --stack-name $STACK_NAME \
          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
          --no-fail-on-empty-changeset \
          --region $AWS_DEFAULT_REGION; then
          echo "✅ CloudFormation deployment completed"
        else
          handle_error "CloudFormation deployment failed"
        fi
        echo ""

        echo "📊 Verifying stack deployment..."
        STACK_STATUS=$(aws cloudformation describe-stacks \
          --stack-name $STACK_NAME \
          --region $AWS_DEFAULT_REGION \
          --query 'Stacks[0].StackStatus' \
          --output text 2>/dev/null || echo "UNKNOWN")

        echo "Stack Status: $STACK_STATUS"

        if [[ "$STACK_STATUS" == "CREATE_COMPLETE" || "$STACK_STATUS" == "UPDATE_COMPLETE" ]]; then
          echo "✅ Stack deployment successful!"
        else
          echo "⚠️  Stack status: $STACK_STATUS"
          echo "Checking recent stack events..."
          aws cloudformation describe-stack-events \
            --stack-name $STACK_NAME \
            --region $AWS_DEFAULT_REGION \
            --max-items 5 \
            --query 'StackEvents[*].[Timestamp,ResourceStatus,ResourceType,LogicalResourceId,ResourceStatusReason]' \
            --output table || echo "Could not retrieve stack events"
        fi

  post_build:
    commands:
      - |
        echo "🏁 Post-build phase starting..."

        if [ "${CODEBUILD_BUILD_SUCCEEDING:-0}" -eq 1 ]; then
          echo "🎉 Build succeeded! Stack deployed successfully."
          echo ""
          echo "📋 Stack Resources:"
          if aws cloudformation describe-stack-resources \
            --stack-name $STACK_NAME \
            --region $AWS_DEFAULT_REGION \
            --query 'StackResources[*].[LogicalResourceId,ResourceType,ResourceStatus]' \
            --output table 2>/dev/null; then
            echo "✅ Stack resources listed successfully"
          else
            echo "⚠️  Could not retrieve stack resources"
          fi
          echo ""
          echo "📤 Stack Outputs:"
          aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --region $AWS_DEFAULT_REGION \
            --query 'Stacks[0].Outputs[*].[OutputKey,OutputValue]' \
            --output table 2>/dev/null || echo "No outputs found"
        else
          echo "❌ Build failed! Checking stack status..."
          echo ""
          echo "📋 Recent Stack Events:"
          if aws cloudformation describe-stack-events \
            --stack-name $STACK_NAME \
            --region $AWS_DEFAULT_REGION \
            --max-items 10 \
            --query 'StackEvents[*].[Timestamp,ResourceStatus,ResourceType,LogicalResourceId,ResourceStatusReason]' \
            --output table 2>/dev/null; then
            echo "Stack events retrieved"
          else
            echo "⚠️  Could not retrieve stack events (stack may not exist)"
          fi
        fi

        echo ""
        echo "🏁 Post-build phase completed"

artifacts:
  files:
    - '**/*'
